---

# Some issues with git:
# - git with become_user set to atom_user fails (keys, permissions)
#   workaround: use the ansible user (become: no) (temporarily change permissions of the dir. to allow this)
#     Note: a previous version of the role changed dir owner to ansible_ssh_user instead of changing perms,
#           but broke with ansible 2  (ref  https://github.com/ansible/ansible/issues/13982)
# - Using depth=1 produces errors when the repo was already cloned on the site directory
#   workarounds: either rename existing atom_path or do not use depth=1

- name: "Create site directory if it doesn't exist'"
  file:
    path: "{{ atom_path }}"
    state: "directory"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
    mode: "u=rwx,g=rwx,o=rx"

- name: "Cleanup cache/ directory"
  command: "rm -rf {{ atom_path }}/cache/*"

- name: "Temporarily delete uploads symlink to avoid long waits on recursive chmod"
  file:
    state: "absent"
    path: "{{ atom_path }}/uploads"
  when: "atom_uploads_symlink is defined"

- name: "Temporarily change permissions of site directory to be able to clone repo"
  file:
    path: "{{ atom_path }}"
    state: "directory"
    mode: "o+w"
    recurse: yes

- name: "Pull new code"
  git:
    update: "yes"
    repo: "{{ atom_repository_url }}"
    version: "{{ atom_repository_version }}"
    dest: "{{ atom_path }}"
    accept_hostkey: "yes"
  notify:
    - "Clear sf_cache"
    - "Reload PHP service"
  become: "no"

- name: "Restore permissions and fix ownership of site directory"
  file:
    path: "{{ atom_path }}"
    state: "directory"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
    mode: "o-w"
    recurse: yes

- name: "Create log directory"
  file:
    path: "{{ atom_path }}/log"
    state: "directory"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
    mode: "u=rwx,g=rwx,o=rx"

- name: "Install configuration files"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
    backup: "yes"
  with_items:
    - src:  "{{ atom_template_config_php }}"
      dest: "{{ atom_path }}/config/config.php"
    - src:  "{{ atom_template_propel_ini }}"
      dest: "{{ atom_path }}/config/propel.ini"
    - src:  "{{ atom_template_app_yml }}"
      dest: "{{ atom_path }}/apps/qubit/config/app.yml"
    - src:  "{{ atom_template_factories_yml }}"
      dest: "{{ atom_path }}/apps/qubit/config/factories.yml"
    - src:  "{{ atom_template_settings_yml }}"
      dest: "{{ atom_path }}/apps/qubit/config/settings.yml"
    - src:  "{{ atom_template_gearman_yml }}"
      dest: "{{ atom_path }}/apps/qubit/config/gearman.yml"
    - src:  "{{ atom_template_search_yml }}"
      dest: "{{ atom_path }}/apps/qubit/config/search.yml"
  notify:
    - "Clear sf_cache"
    - "Reload PHP service"

- name: "Install sf symlink"
  file:
    state: "link"
    src: "{{ atom_path }}/vendor/symfony/data/web/sf"
    path: "{{ atom_path }}/sf"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"

# Export php pool env vars to the login shell, for CLI tools
#   (such as ARCHIVEMATICA_SS_USER, required in Binder)
#   To preserve env vars when doing sudo use -E flag
#   Example: Instead of: sudo -u www-data php symfony cc
#                    do: sudo -E -u www-data php symfony cc
- name: "Add config to /etc/profile.d"
  template:
    src: "etc/profile.d/atom.sh.j2"
    dest: "/etc/profile.d/atom.sh"

- name: "Check if the composer.lock file exists"
  stat:
    path: "{{ atom_path }}/composer.lock"
  register: composer_lock

- name: "Install Composer dependencies for production"
  composer:
    command: install
    working_dir: "{{ atom_path }}"
  when:
    - composer_lock.stat.exists
    - atom_environment_type != "development"

- name: "Install Composer dependencies for dev"
  composer:
    command: install
    working_dir: "{{ atom_path }}"
    no_dev: no
  when:
    - composer_lock.stat.exists
    - atom_environment_type == "development"

- name: "SELinux tasks"
  block:
    - name: "Selinux: allow httpd to write on atom folder"
      shell: 'semanage fcontext -a -t httpd_sys_rw_content_t {{ atom_path }}\(/.*\)? && restorecon -R -v {{ atom_path }}'
    - name: "Selinux: allow httpd to write on uploads folders"
      shell: 'semanage fcontext -a -t httpd_sys_rw_content_t {{ atom_uploads_symlink }}\(/.*\)? && restorecon -R -v {{ atom_uploads_symlink }}'
      when:
        - "atom_uploads_symlink is defined"
    - name: "Selinux: enable httpd_can_network_connect"
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes
  when:
    - ansible_os_family == "RedHat"
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
  tags:
    - selinux