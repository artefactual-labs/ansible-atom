---

- name: "Create revision symlink"
  file:
    state: "link"
    src: "{{ atom_path }}/{{ atom_extra_path }}"
    dest: "{{ atom_path }}/{{ atom_revision_directory_latest_symlink_dir }}"
    force: "yes"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: 
    - "atom_revision_directory_latest_symlink_dir is defined"
    - "atom_revision_directory|bool"

# Needed when using as AtoM dir in a dir mounted in /mnt or similar dir /SELinux thinks it is insecure
# and doesn't allow to follow symlink in http context
- name: "Allow systemd (init_t) to read symlinks to httpd_sys_rw_content_t"
  block:

    - name: "Selinux: allow httpd to write on atom symlink (when using atom_revision_directory)"
      sefcontext:
        target: "{{ atom_path }}/{{ atom_revision_directory_latest_symlink_dir }}"
        setype: httpd_sys_rw_content_t
        state: present

    - name: "Selinux: Apply restorecon on atom symlink (when using atom_revision_directory)"
      shell: "restorecon -v {{ atom_path }}/{{ atom_revision_directory_latest_symlink_dir }}"

    - name: "Write SELinux policy source"
      copy:
        dest: /tmp/atom_symlink_allow.te
        content: |
          module atom_symlink_allow 1.0;

          require {
              type init_t;
              type httpd_sys_rw_content_t;
              class lnk_file read;
          }

          allow init_t httpd_sys_rw_content_t:lnk_file read;

    - name: "Compile policy module"
      command: checkmodule -M -m -o /tmp/atom_symlink_allow.mod /tmp/atom_symlink_allow.te
      args:
        creates: /tmp/atom_symlink_allow.mod

    - name: "Package policy module"
      command: semodule_package -o /tmp/atom_symlink_allow.pp -m /tmp/atom_symlink_allow.mod
      args:
        creates: /tmp/atom_symlink_allow.pp

    - name: "Install SELinux policy module"
      command: semodule -i /tmp/atom_symlink_allow.pp
      args:
        creates: /var/lib/selinux/targeted/active/modules/400/atom_symlink_allow.pp

    - name: "Delete SElinux policy tmp files"
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/atom_symlink_allow.te
        - /tmp/atom_symlink_allow.mod
        - /tmp/atom_symlink_allow.pp
  when:
    - "atom_revision_directory_latest_symlink_dir is defined"
    - "atom_revision_directory|bool"
    - "ansible_os_family in ['RedHat','Rocky']"
    - "ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'"
# End SELinux symlink policy block


# AtoM private symlink for digital object access control
- name: "Create private symlink"
  file:
    state: "link"
    src: "{{ atom_path }}/{{ atom_revision_directory_latest_symlink_dir }}"
    dest: "{{ atom_path }}/private"
    force: "yes"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when:
    - "atom_revision_directory_latest_symlink_dir is defined"
    - "atom_revision_directory|bool"
    - "atom_private_symlink|bool"

- name: "Ensure uploads symlink directory exists"
  file:
    state: "directory"
    path: "{{ atom_uploads_symlink }}"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_uploads_symlink is defined"

- name: "Uploads symlink"
  file:
    state: "link"
    src: "{{ atom_uploads_symlink }}"
    path: "{{ atom_path }}/{{ atom_extra_path }}/uploads"
    force: "yes"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_uploads_symlink is defined"

- name: "Uploads directory"
  file:
    state: "directory"
    path: "{{ atom_path }}/{{ atom_extra_path }}/uploads"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_uploads_symlink is undefined"

- name: "Ensure downloads symlink directory exists"
  file:
    state: "directory"
    path: "{{ atom_downloads_symlink }}"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_downloads_symlink is defined"

- name: "Downloads symlink"
  file:
    state: "link"
    src: "{{ atom_downloads_symlink }}"
    path: "{{ atom_path }}/{{ atom_extra_path }}/downloads"
    force: "yes"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_downloads_symlink is defined"

- name: "Downloads directory"
  file:
    state: "directory"
    path: "{{ atom_path }}/{{ atom_extra_path }}/downloads"
    owner: "{{ atom_user }}"
    group: "{{ atom_group }}"
  when: "atom_downloads_symlink is undefined"

- name: "SELinux tasks for symlinks"
  block:
    - name: "Selinux: allow httpd to write on uploads folders"
      sefcontext:
        target: "{{ atom_uploads_symlink }}(/.*)?"
        setype: httpd_sys_rw_content_t
        state: present
      when:
        - "atom_uploads_symlink is defined"
    - name: "Selinux: Apply restorecon on uploads folders"
      shell: 'restorecon -R -v {{ atom_uploads_symlink }}'
      when:
        - "atom_uploads_symlink is defined"
    - name: "Selinux: allow httpd to write on downloads folders"
      sefcontext:
        target: "{{ atom_downloads_symlink }}(/.*)?"
        setype: httpd_sys_rw_content_t
        state: present
      when:
        - "atom_downloads_symlink is defined"
    - name: "Selinux: Apply restorecon on downloads folders"
      shell: 'restorecon -R -v {{ atom_downloads_symlink }}'
      when:
        - "atom_downloads_symlink is defined"
  when:
    - ansible_os_family in ["RedHat","Rocky"]
    - ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled'
  tags:
    - selinux
